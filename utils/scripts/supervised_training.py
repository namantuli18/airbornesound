# -*- coding: utf-8 -*-
"""fork-of-slider-6db.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oaKQP4HnD0iyjWr83F_Xg8eK0lfTvlq-

# Importing Necessary Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# Basic Libraries

import pandas as pd
import numpy as np
import tensorflow as tf
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.model_selection import GridSearchCV

from sklearn.preprocessing import MinMaxScaler

# Libraries for Classification and building Models

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Dropout
from tensorflow.keras.utils import to_categorical 

from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

# Project Specific Libraries

import os
import librosa
import librosa.display
import glob 
import skimage

"""#### Using Librosa to analyse random sound sample - SPECTOGRAM"""

dat1, sampling_rate1 = librosa.load('../input/6-slider/slider/id_00/normal/00000000.wav')
dat2, sampling_rate2 = librosa.load('../input/6-slider/slider/id_00/normal/00000000.wav')

plt.figure(figsize=(20, 10))
D = librosa.amplitude_to_db(np.abs(librosa.stft(dat1)), ref=np.max)
plt.subplot(4, 2, 1)
librosa.display.specshow(D, y_axis='linear')
plt.colorbar(format='%+2.0f dB')
plt.title('Linear-frequency power spectrogram')

plt.figure(figsize=(20, 10))
D = librosa.amplitude_to_db(np.abs(librosa.stft(dat2)), ref=np.max)
plt.subplot(4, 2, 1)
librosa.display.specshow(D, y_axis='linear')
plt.colorbar(format='%+2.0f dB')
plt.title('Linear-frequency power spectrogram')

'''EXAMPLE'''

dat1, sampling_rate1 = librosa.load('../input/6-slider/slider/id_00/normal/00000000.wav')
arr = librosa.feature.melspectrogram(y=dat1, sr=sampling_rate1)
arr.shape

import tqdm
feature = []
label = []

INPUT_PATH='../input/6-slider/slider'

for files in os.listdir(""):
    for individual_files in os.listdir(INPUT_PATH):
        for j in tqdm.tqdm(os.listdir(os.path.join(INPUT_PATH,files,individual_files))):
            file_name=os.path.join(INPUT_PATH,files,individual_files,j)
            X, sample_rate = librosa.load(file_name, res_type='kaiser_fast')
            mels = np.mean(librosa.feature.melspectrogram(y=X, sr=sample_rate).T,axis=0)
            feature.append(mels)
            label.append(individual_files)
            #print(individual_files)

from collections import Counter
Counter(label)

temp = [feature,label]

temp = np.array(temp)
data = temp.transpose()

X_ = data[:, 0]
Y = data[:, 1]
print(X_.shape, Y.shape)
X = np.empty([X_.shape[0], 128])

for i in range(X_.shape[0]):
    X[i] = (X_[i])

y=[]
for i in Y:
    if i=='normal':
        y.append(0)
    else:
        y.append(1)

Y = to_categorical(y)

'''Final Data'''
print(X.shape)
print(Y.shape)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = 1,stratify=Y,test_size=0.1)

X_train = X_train.reshape(len(X_train), 16, 8, 1)
X_test = X_test.reshape(len(X_test), 16, 8, 1)

input_dim = (16, 8,1)

"""# Creating Keras Model and Testing

#### Model 1:

1. CNN 2D with 64 units and tanh activation.
2. MaxPool2D with 2*2 window.
3. CNN 2D with 128 units and tanh activation.
4. MaxPool2D with 2*2 window.
5. Dropout Layer with 0.2 drop probability.
6. DL with 1024 units and tanh activation.
4. DL 10 units with softmax activation.
5. Adam optimizer with categorical_crossentropy loss function.

90 epochs have been used.
"""

model = Sequential()

model.add(Conv2D(64, (3, 3), padding = "same", activation = "tanh", input_shape = input_dim))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Conv2D(128, (3, 3), padding = "same", activation = "tanh"))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(0.1))
model.add(Flatten())
model.add(Dense(1024, activation = "tanh"))
model.add(Dense(2, activation = "softmax"))

model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy',tf.keras.metrics.AUC()])

model.fit(X_train, Y_train, epochs = 100, batch_size = 128, validation_data = (X_test, Y_test))

predictions = model.predict(X_test)
score = model.evaluate(X_test, Y_test)
print(score)

model.save('model.h5')

preds = np.argmax(predictions, axis = 1)
